// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "product/product.proto" (package "product", syntax proto3)
// tslint:disable
import type { RpcOptions, RpcTransport, ServiceInfo, UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateProductRequest, CreateProductResponse, DeleteProductRequest, DeleteProductResponse, DetailProductRequest, DetailProductResponse, EditProductRequest, EditProductResponse, HighlightProductsRequest, HighlightProductsResponse, ListProductAdminRequest, ListProductAdminResponse, ListProductRequest, ListProductResponse } from "./product";
import { ProductService } from "./product";
/**
 * @generated from protobuf service product.ProductService
 */
export interface IProductServiceClient {
    /**
     * @generated from protobuf rpc: CreateProduct(product.CreateProductRequest) returns (product.CreateProductResponse);
     */
    createProduct(input: CreateProductRequest, options?: RpcOptions): UnaryCall<CreateProductRequest, CreateProductResponse>;
    /**
     * @generated from protobuf rpc: DetailProduct(product.DetailProductRequest) returns (product.DetailProductResponse);
     */
    detailProduct(input: DetailProductRequest, options?: RpcOptions): UnaryCall<DetailProductRequest, DetailProductResponse>;
    /**
     * @generated from protobuf rpc: EditProduct(product.EditProductRequest) returns (product.EditProductResponse);
     */
    editProduct(input: EditProductRequest, options?: RpcOptions): UnaryCall<EditProductRequest, EditProductResponse>;
    /**
     * @generated from protobuf rpc: DeleteProduct(product.DeleteProductRequest) returns (product.DeleteProductResponse);
     */
    deleteProduct(input: DeleteProductRequest, options?: RpcOptions): UnaryCall<DeleteProductRequest, DeleteProductResponse>;
    /**
     * @generated from protobuf rpc: ListProduct(product.ListProductRequest) returns (product.ListProductResponse);
     */
    listProduct(input: ListProductRequest, options?: RpcOptions): UnaryCall<ListProductRequest, ListProductResponse>;
    /**
     * @generated from protobuf rpc: ListProductAdmin(product.ListProductAdminRequest) returns (product.ListProductAdminResponse);
     */
    listProductAdmin(input: ListProductAdminRequest, options?: RpcOptions): UnaryCall<ListProductAdminRequest, ListProductAdminResponse>;
    /**
     * @generated from protobuf rpc: HighlightProducts(product.HighlightProductsRequest) returns (product.HighlightProductsResponse);
     */
    highlightProducts(input: HighlightProductsRequest, options?: RpcOptions): UnaryCall<HighlightProductsRequest, HighlightProductsResponse>;
}
/**
 * @generated from protobuf service product.ProductService
 */
export class ProductServiceClient implements IProductServiceClient, ServiceInfo {
    typeName = ProductService.typeName;
    methods = ProductService.methods;
    options = ProductService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateProduct(product.CreateProductRequest) returns (product.CreateProductResponse);
     */
    createProduct(input: CreateProductRequest, options?: RpcOptions): UnaryCall<CreateProductRequest, CreateProductResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateProductRequest, CreateProductResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetailProduct(product.DetailProductRequest) returns (product.DetailProductResponse);
     */
    detailProduct(input: DetailProductRequest, options?: RpcOptions): UnaryCall<DetailProductRequest, DetailProductResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DetailProductRequest, DetailProductResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EditProduct(product.EditProductRequest) returns (product.EditProductResponse);
     */
    editProduct(input: EditProductRequest, options?: RpcOptions): UnaryCall<EditProductRequest, EditProductResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EditProductRequest, EditProductResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteProduct(product.DeleteProductRequest) returns (product.DeleteProductResponse);
     */
    deleteProduct(input: DeleteProductRequest, options?: RpcOptions): UnaryCall<DeleteProductRequest, DeleteProductResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteProductRequest, DeleteProductResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListProduct(product.ListProductRequest) returns (product.ListProductResponse);
     */
    listProduct(input: ListProductRequest, options?: RpcOptions): UnaryCall<ListProductRequest, ListProductResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListProductRequest, ListProductResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListProductAdmin(product.ListProductAdminRequest) returns (product.ListProductAdminResponse);
     */
    listProductAdmin(input: ListProductAdminRequest, options?: RpcOptions): UnaryCall<ListProductAdminRequest, ListProductAdminResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListProductAdminRequest, ListProductAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: HighlightProducts(product.HighlightProductsRequest) returns (product.HighlightProductsResponse);
     */
    highlightProducts(input: HighlightProductsRequest, options?: RpcOptions): UnaryCall<HighlightProductsRequest, HighlightProductsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<HighlightProductsRequest, HighlightProductsResponse>("unary", this._transport, method, opt, input);
    }
}
